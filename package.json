{
	"name": "context-window",
	"displayName": "Context Window",
	"description": "Display full code context in the panel, similar to the context window in Source Insight.",
	"version": "0.5.3",
	"publisher": "zhiminxiong",
	"keywords": [
        "context",
		"definition",
        "source insight",
		"docs",
		"hover",
		"sidebar",
		"panel"
	],
	"galleryBanner": {
		"color": "4C4C4C",
		"theme": "dark"
	},
	"icon": "icon.png",
	"engines": {
		"vscode": "^1.50.0"
	},
	"categories": [
		"Other",
        "Programming Languages"
	],
	"activationEvents": [
		"onView:contextView.context",
		"onCommand:contextView.contextWindow.pin",
		"onCommand:contextView.contextWindow.unpin",
        "onStartupFinished"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/zhiminxiong/vscode-context-window"
	},
	"bugs": "https://github.com/zhiminxiong/vscode-context-window/issues",
	"main": "./dist/extension",
	"extensionKind": [
		"ui",
		"workspace"
	],
	"contributes": {
		"viewsContainers": {
			"panel": [
				{
					"id": "contextView-context",
					"title": "Context",
					"icon": "$(symbol-class)"
				}
			]
		},
		"views": {
			"contextView-context": [
				{
					"type": "webview",
					"id": "contextView.context",
					"name": "Context Window",
					"contextualTitle": "Context"
				}
			]
		},
		"commands": [
			{
				"command": "contextView.contextWindow.pin",
				"title": "Pin Current Context",
				"icon": "$(pin)",
				"category": "Context View"
			},
			{
				"command": "contextView.contextWindow.unpin",
				"title": "Unpin Current Context",
				"icon": "$(pinned)",
				"category": "Context View"
			},
            {
                "command": "vscode-context-window.showContextWindow",
                "title": "Show Context Window"
            }
		],
		"menus": {
			"commandPalette": [
				{
					"command": "contextView.contextWindow.pin",
					"when": "!contextView.contextWindow.isPinned"
				},
				{
					"command": "contextView.contextWindow.unpin",
					"when": "contextView.contextWindow.isPinned"
				}
			],
			"view/title": [
				{
					"command": "contextView.contextWindow.pin",
					"when": "view == contextView.context && !contextView.contextWindow.isPinned",
					"group": "navigation"
				},
				{
					"command": "contextView.contextWindow.unpin",
					"when": "view == contextView.context && contextView.contextWindow.isPinned",
					"group": "navigation"
				}
			]
		},
		"configuration": {
			"title": "Context View",
			"properties": {
				"contextView.contextWindow.updateMode": {
					"type": "string",
					"description": "Controls how the context view is updated when the cursor moves.",
					"default": "live",
					"enum": [
						"live",
						"sticky"
					],
					"enumDescriptions": [
						"The context view tracks the current cursor position. Display empty content if no symbol is found at the current position.",
						"The context view tries to show the context for the symbol at the current cursor position. If there is none, it continues showing the last available context."
					]
				},
                "contextView.contextWindow.selectionBackground": {
                    "type": "string",
                    "default": "#07c2db71",
                    "description": "Context Window 选中区域背景色"
                },
                "contextView.contextWindow.inactiveSelectionBackground": {
                    "type": "string",
                    "default": "#07c2db71",
                    "description": "Context Window 非活动选中区域背景色"
                },
                "contextView.contextWindow.selectionHighlightBackground": {
                    "type": "string",
                    "default": "#5bdb0771",
                    "description": "Context Window 选中高亮背景色"
                },
                "contextView.contextWindow.selectionHighlightBorder": {
                    "type": "string",
                    "default": "#5bdb0791",
                    "description": "Context Window 选中高亮边框色"
                },
                "contextView.contextWindow.minimap": {
                    "type": "boolean",
                    "default": true,
                    "description": "Controls whether the Context Window minimap is shown."
                },
                "contextView.contextWindow.fontSize": {
                    "type": "number",
                    "default": 14,
                    "description": "Context Window fontSize"
                },
                "contextView.contextWindow.fontFamily": {
                    "type": "string",
                    "default": "Consolas, monospace",
                    "description": "Context Window fontFamily"
                },
                "contextView.contextWindow.useDefaultTheme": {
                    "type": "boolean",
                    "default": true,
                    "description": "Using the default theme of Monaco Editor.\nTake effect when VSCode starts."
                },
                "contextView.contextWindow.fixToken": {
                    "type": "boolean",
                    "default": false,
                    "description": "In VSCode, treat #include, #pragma, #region, and #endregion as distinct tokens, separate from #directive.\nTake effect when VSCode starts."
                },
                "contextView.contextWindow.lightThemeRules": {
                    "type": "array",
                    "default": [
                    { "token": "keyword", "foreground": "#0000ff" },
                    { "token": "keyword.type", "foreground": "#ff0000", "fontStyle": "bold", "description": "keyword such as function class etc." },
                    { "token": "keyword.flow", "foreground": "#ff0000", "fontStyle": "bold" },
                    { "token": "keyword.control", "foreground": "#ff0000" },
                    { "token": "keyword.operator", "foreground": "#800080" },
                    { "token": "keyword.declaration", "foreground": "#0000ff" },
                    { "token": "keyword.modifier", "foreground": "#0000ff" },
                    { "token": "keyword.conditional", "foreground": "#ff0000" },
                    { "token": "keyword.repeat", "foreground": "#ff0000" },
                    { "token": "keyword.exception", "foreground": "#ff0000" },
                    { "token": "keyword.other", "foreground": "#0000ff" },
                    { "token": "keyword.predefined", "foreground": "#0000ff" },
                    { "token": "keyword.function", "foreground": "#ff0000", "fontStyle": "bold" },
                    { "token": "keyword.directive", "foreground": "#0000ff" },
                    { "token": "keyword.directive.control", "foreground": "#ff0000", "fontStyle": "bold" },
                    { "token": "variable", "foreground": "#000080" },
                    { "token": "variable.name", "foreground": "#000080", "fontStyle": "bold" },
                    { "token": "variable.parameter", "foreground": "#000080" },
                    { "token": "variable.predefined", "foreground": "#ff0000", "fontStyle": "bold" },
                    { "token": "identifier", "foreground": "#000080" },
                    { "token": "type", "foreground": "#0000ff" },
                    { "token": "type.declaration", "foreground": "#0000ff" },
                    { "token": "class", "foreground": "#ff0000" },
                    { "token": "class.name", "foreground": "#0000ff", "fontStyle": "bold" },
                    { "token": "entity.name.type.class", "foreground": "#ff0000", "fontStyle": "bold" },
                    { "token": "entity.name.type", "foreground": "#ff0000", "fontStyle": "bold" },
                    { "token": "interface", "foreground": "#ff0000" },
                    { "token": "enum", "foreground": "#ff0000" },
                    { "token": "struct", "foreground": "#ff0000" },
                    { "token": "function", "foreground": "#a00000" },
                    { "token": "function.name", "foreground": "#a00000", "fontStyle": "bold" },
                    { "token": "function.call", "foreground": "#a00000" },
                    { "token": "method", "foreground": "#a00000" },
                    { "token": "method.name", "foreground": "#a00000", "fontStyle": "bold" },
                    { "token": "string", "foreground": "#005700" },
                    { "token": "string.escape", "foreground": "#005700" },
                    { "token": "number", "foreground": "#ff0000" },
                    { "token": "boolean", "foreground": "#800080" },
                    { "token": "regexp", "foreground": "#811f3f" },
                    { "token": "null", "foreground": "#0000ff" },
                    { "token": "comment", "foreground": "#005700" },
                    { "token": "comment.doc", "foreground": "#005700" },
                    { "token": "property", "foreground": "#000080" },
                    { "token": "property.declaration", "foreground": "#000080" },
                    { "token": "member", "foreground": "#000080" },
                    { "token": "field", "foreground": "#000080" },
                    { "token": "operator", "foreground": "#800080" },
                    { "token": "delimiter", "foreground": "#000000" },
                    { "token": "delimiter.bracket", "foreground": "#000000" },
                    { "token": "delimiter.parenthesis", "foreground": "#000000" },
                    { "token": "tag", "foreground": "#800000" },
                    { "token": "tag.attribute.name", "foreground": "#000080" },
                    { "token": "attribute.name", "foreground": "#000080" },
                    { "token": "attribute.value", "foreground": "#0000ff" },
                    { "token": "namespace", "foreground": "#ff0000" },
                    { "token": "constant", "foreground": "#800080" },
                    { "token": "constant.language", "foreground": "#0000ff" },
                    { "token": "modifier", "foreground": "#0000ff" },
                    { "token": "constructor", "foreground": "#a00000" },
                    { "token": "decorator", "foreground": "#800080" },
                    { "token": "macro", "foreground": "#A00000", "fontStyle": "italic" }
                    ]
                },
                "contextView.contextWindow.darkThemeRules": {}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "webpack --mode production",
		"webpack": "webpack --mode development",
		"webpack-dev": "webpack --mode development --watch",
		"lint": "eslint . --ext .ts,.tsx"
	},
	"dependencies": {
		"monaco-editor": "^0.34.0"
	},
	"devDependencies": {
		"@types/node": "^14.11.2",
		"@types/vscode": "^1.50.0",
		"@typescript-eslint/eslint-plugin": "^3.0.2",
		"@typescript-eslint/parser": "^3.0.2",
		"eslint": "^7.1.0",
		"ts-loader": "^8.0.4",
		"typescript": "^4.6.4",
		"webpack": "^5.72.0",
		"webpack-cli": "^4.9.0"
	}
}
